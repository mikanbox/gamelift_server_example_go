// Code generated by MockGen. DO NOT EDIT.
// Source: aws/amazon-gamelift-go-sdk/server/internal/transport (interfaces: ITransport)

// Package mock is a generated GoMock package.
package mock

import (
	transport "aws/amazon-gamelift-go-sdk/server/internal/transport"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITransport is a mock of ITransport interface.
type MockITransport struct {
	ctrl     *gomock.Controller
	recorder *MockITransportMockRecorder
}

// MockITransportMockRecorder is the mock recorder for MockITransport.
type MockITransportMockRecorder struct {
	mock *MockITransport
}

// NewMockITransport creates a new mock instance.
func NewMockITransport(ctrl *gomock.Controller) *MockITransport {
	mock := &MockITransport{ctrl: ctrl}
	mock.recorder = &MockITransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransport) EXPECT() *MockITransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockITransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockITransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockITransport)(nil).Close))
}

// Connect mocks base method.
func (m *MockITransport) Connect(arg0 *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockITransportMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockITransport)(nil).Connect), arg0)
}

// Reconnect mocks base method.
func (m *MockITransport) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect.
func (mr *MockITransportMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockITransport)(nil).Reconnect))
}

// SetReadHandler mocks base method.
func (m *MockITransport) SetReadHandler(arg0 transport.ReadHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadHandler", arg0)
}

// SetReadHandler indicates an expected call of SetReadHandler.
func (mr *MockITransportMockRecorder) SetReadHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadHandler", reflect.TypeOf((*MockITransport)(nil).SetReadHandler), arg0)
}

// Write mocks base method.
func (m *MockITransport) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockITransportMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockITransport)(nil).Write), arg0)
}
