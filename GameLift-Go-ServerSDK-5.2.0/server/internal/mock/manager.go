// Code generated by MockGen. DO NOT EDIT.
// Source: aws/amazon-gamelift-go-sdk/server/internal (interfaces: IGameLiftManager)

// Package mock is a generated GoMock package.
package mock

import (
	internal "aws/amazon-gamelift-go-sdk/server/internal"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIGameLiftManager is a mock of IGameLiftManager interface.
type MockIGameLiftManager struct {
	ctrl     *gomock.Controller
	recorder *MockIGameLiftManagerMockRecorder
}

// MockIGameLiftManagerMockRecorder is the mock recorder for MockIGameLiftManager.
type MockIGameLiftManagerMockRecorder struct {
	mock *MockIGameLiftManager
}

// NewMockIGameLiftManager creates a new mock instance.
func NewMockIGameLiftManager(ctrl *gomock.Controller) *MockIGameLiftManager {
	mock := &MockIGameLiftManager{ctrl: ctrl}
	mock.recorder = &MockIGameLiftManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGameLiftManager) EXPECT() *MockIGameLiftManagerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIGameLiftManager) Connect(arg0, arg1, arg2, arg3, arg4 string, arg5 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIGameLiftManagerMockRecorder) Connect(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIGameLiftManager)(nil).Connect), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Disconnect mocks base method.
func (m *MockIGameLiftManager) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockIGameLiftManagerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIGameLiftManager)(nil).Disconnect))
}

// HandleRequest mocks base method.
func (m *MockIGameLiftManager) HandleRequest(arg0 internal.MessageGetter, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockIGameLiftManagerMockRecorder) HandleRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockIGameLiftManager)(nil).HandleRequest), arg0, arg1, arg2)
}

// SendMessage mocks base method.
func (m *MockIGameLiftManager) SendMessage(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIGameLiftManagerMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIGameLiftManager)(nil).SendMessage), arg0)
}
