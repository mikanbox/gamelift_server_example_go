// Code generated by MockGen. DO NOT EDIT.
// Source: aws/amazon-gamelift-go-sdk/server/internal (interfaces: IGameLiftMessageHandler)

// Package mock is a generated GoMock package.
package mock

import (
	model "aws/amazon-gamelift-go-sdk/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIGameLiftMessageHandler is a mock of IGameLiftMessageHandler interface.
type MockIGameLiftMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIGameLiftMessageHandlerMockRecorder
}

// MockIGameLiftMessageHandlerMockRecorder is the mock recorder for MockIGameLiftMessageHandler.
type MockIGameLiftMessageHandlerMockRecorder struct {
	mock *MockIGameLiftMessageHandler
}

// NewMockIGameLiftMessageHandler creates a new mock instance.
func NewMockIGameLiftMessageHandler(ctrl *gomock.Controller) *MockIGameLiftMessageHandler {
	mock := &MockIGameLiftMessageHandler{ctrl: ctrl}
	mock.recorder = &MockIGameLiftMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGameLiftMessageHandler) EXPECT() *MockIGameLiftMessageHandlerMockRecorder {
	return m.recorder
}

// OnRefreshConnection mocks base method.
func (m *MockIGameLiftMessageHandler) OnRefreshConnection(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRefreshConnection", arg0, arg1)
}

// OnRefreshConnection indicates an expected call of OnRefreshConnection.
func (mr *MockIGameLiftMessageHandlerMockRecorder) OnRefreshConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRefreshConnection", reflect.TypeOf((*MockIGameLiftMessageHandler)(nil).OnRefreshConnection), arg0, arg1)
}

// OnStartGameSession mocks base method.
func (m *MockIGameLiftMessageHandler) OnStartGameSession(arg0 *model.GameSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStartGameSession", arg0)
}

// OnStartGameSession indicates an expected call of OnStartGameSession.
func (mr *MockIGameLiftMessageHandlerMockRecorder) OnStartGameSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStartGameSession", reflect.TypeOf((*MockIGameLiftMessageHandler)(nil).OnStartGameSession), arg0)
}

// OnTerminateProcess mocks base method.
func (m *MockIGameLiftMessageHandler) OnTerminateProcess(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnTerminateProcess", arg0)
}

// OnTerminateProcess indicates an expected call of OnTerminateProcess.
func (mr *MockIGameLiftMessageHandlerMockRecorder) OnTerminateProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTerminateProcess", reflect.TypeOf((*MockIGameLiftMessageHandler)(nil).OnTerminateProcess), arg0)
}

// OnUpdateGameSession mocks base method.
func (m *MockIGameLiftMessageHandler) OnUpdateGameSession(arg0 *model.GameSession, arg1 *model.UpdateReason, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdateGameSession", arg0, arg1, arg2)
}

// OnUpdateGameSession indicates an expected call of OnUpdateGameSession.
func (mr *MockIGameLiftMessageHandlerMockRecorder) OnUpdateGameSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdateGameSession", reflect.TypeOf((*MockIGameLiftMessageHandler)(nil).OnUpdateGameSession), arg0, arg1, arg2)
}
